{"version":3,"file":"static/js/513.e87b9680.chunk.js","mappings":"8TAmCA,EA/B2BA,EAAAA,YAAiB,SAAAC,EAWzCC,GAAQ,IAVTC,EAAQF,EAARE,SACAC,EAASH,EAATG,UACAC,EAAOJ,EAAPI,QACAC,EAAQL,EAARK,SACAC,EAAUN,EAAVM,WACAC,EAAKP,EAALO,MACAC,EAAIR,EAAJQ,KACAC,EAAOT,EAAPS,QACAC,EAAUV,EAAVU,WACGC,GAAKC,EAAAA,EAAAA,GAAAZ,EAAAa,GAEFC,GAAoBC,EAAAA,EAAAA,IAAmBb,EAAU,SACjDc,EAAUC,IAAWd,EAAWW,EAAmBL,GAAW,GAAJS,OAAOJ,EAAiB,KAAAI,OAAIT,GAAWD,GAAQ,GAAJU,OAAOJ,EAAiB,KAAAI,OAAIV,GAAQJ,GAAW,GAAJc,OAAOJ,EAAiB,KAAAI,OAAuB,kBAAZd,EAAuB,WAAHc,OAAcd,GAAY,WAAaC,GAAY,GAAJa,OAAOJ,EAAiB,aAAaR,GAAc,GAAJY,OAAOJ,EAAiB,eAAeP,GAAS,GAAJW,OAAOJ,EAAiB,WACzWK,GAAqBC,EAAAA,EAAAA,KAAK,SAAOC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClCV,GAAK,IACRR,UAAWa,EACXf,IAAKA,KAEP,GAAIS,EAAY,CACd,IAAIY,EAAkB,GAAHJ,OAAMJ,EAAiB,eAI1C,MAH0B,kBAAfJ,IACTY,EAAkB,GAAHJ,OAAMI,EAAe,KAAAJ,OAAIR,KAEtBU,EAAAA,EAAAA,KAAK,MAAO,CAC9BjB,UAAWmB,EACXC,SAAUJ,GAEd,CACA,OAAOA,CACT,I,6BCuCA,MAjEA,WAII,IAAIK,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAW,OAAOA,EAAMC,OAAO,IACrDC,GAAYH,EAAAA,EAAAA,KAAY,SAACC,GAAW,OAAOA,CAAK,IAGhDG,GAAWC,EAAAA,EAAAA,MAOf,OAJAC,QAAQC,IAAIR,EAAO,IACnBO,QAAQC,IAAIR,EAAO,IACnBO,QAAQC,IAAIJ,EAAUK,OAGlBC,EAAAA,EAAAA,MAAA,OAAAX,SAAA,EACIW,EAAAA,EAAAA,MAAA,KAAAX,SAAA,CAAIK,EAAUK,KAAKE,KAAK,sCAExBD,EAAAA,EAAAA,MAACE,EAAK,CAAChC,SAAO,EAACC,UAAQ,EAACE,OAAK,EAAAgB,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,UACIW,EAAAA,EAAAA,MAAA,MAAAX,SAAA,EACAH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,8BACJH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,wBACJH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,kBACJH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,8BACJH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,kCAKPC,EAAOa,KAAI,SAACC,EAAMC,GACf,OACInB,EAAAA,EAAAA,KAAA,SAAAG,UACIW,EAAAA,EAAAA,MAAA,MAAAX,SAAA,EACIH,EAAAA,EAAAA,KAAA,MAAAG,SAAKe,EAAKE,MACVpB,EAAAA,EAAAA,KAAA,MAAAG,SAAKe,EAAKH,QACVf,EAAAA,EAAAA,KAAA,MAAAG,SAAKe,EAAKG,SACVP,EAAAA,EAAAA,MAAA,MAAAX,SAAA,EACIH,EAAAA,EAAAA,KAAA,UAAQjB,UAAU,WAAWuC,QAAS,WAIlC,IAAIC,EAAS,CAACJ,MAAOA,EAAOK,YAAa,GACzCf,GAASgB,EAAAA,EAAAA,IAAaF,GAC1B,EAAEpB,SAAC,OAEHH,EAAAA,EAAAA,KAAA,UAAQjB,UAAU,WAAWuC,QAAS,WAClC,IAAIC,EAAS,CAACJ,MAAOA,EAAOK,YAAa,IACzCf,GAASgB,EAAAA,EAAAA,IAAaF,GAC1B,EAAEpB,SAAC,YAEPH,EAAAA,EAAAA,KAAA,MAAAG,UAAIH,EAAAA,EAAAA,KAAA,UAAQjB,UAAU,YAAYuC,QAAS,WACvCb,GAASiB,EAAAA,EAAAA,IAAUP,GACvB,EAAEhB,SAAC,qBApBEgB,IAwBrB,SAKhB,C","sources":["../node_modules/react-bootstrap/esm/Table.js","pages/cart.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;","import { useState } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { useNavigate} from 'react-router-dom';\r\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeName, increaseNum, incraseCount, deletItem } from '../store';\r\n\r\n\r\nfunction Cart() {\r\n\r\n    //index.js에서 <Provider store = {store}>로 전달한 slice 데이터들을 useSelector로 가져올 수 있다.\r\n    //리덕스 스토어 안에 있는 product slice만 가져옴.\r\n    let myData = useSelector((state) => {return state.product});\r\n    let myDataAll = useSelector((state) => {return state});\r\n\r\n    //slice 변경함수 가져오기 위한 dispatch 선언\r\n    let dispatch = useDispatch();\r\n    \r\n    //product slice는 [{ id: 0, name: '광마회귀', count: 1 }, { id: 1, name: '화산귀환', count: 2}]라는 배열을 가짐.\r\n    console.log(myData[1]); //product 데이터 배열의 첫번째 제품\r\n    console.log(myData[2]); ////product 데이터 배열의 두번째 제품\r\n    console.log(myDataAll.user);\r\n\r\n    return (\r\n        <div>\r\n            <p>{myDataAll.user.name}의 장바구니</p>\r\n\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                    <th>상품번호</th>\r\n                    <th>상품명</th>\r\n                    <th>수량</th>\r\n                    <th>변경하기</th>\r\n                    <th>삭제하기</th>\r\n                    </tr>\r\n                </thead>\r\n                {/* slice로 받아온 데이터 화면에 출력 */}\r\n                {/* myData = product slice 이기 때문에 배열이라서 map을 통해 구현 */}\r\n                {myData.map((data, index)=>{\r\n                    return(\r\n                        <tbody>\r\n                            <tr key={index}>\r\n                                <td>{data.id}</td>\r\n                                <td>{data.name}</td>\r\n                                <td>{data.count}</td>\r\n                                <td>\r\n                                    <button className='btnUpate' onClick={()=>{\r\n\r\n                                        //궁금한 점: 오브젝트로 인자를 보낼 수 없을까?\r\n                                        //정답! 해보니까 된다!\r\n                                        let action = {index: index, IncreaseNum: 1}\r\n                                        dispatch(incraseCount(action));\r\n                                    }}>+</button>\r\n                                    \r\n                                    <button className='btnUpate' onClick={()=>{\r\n                                        let action = {index: index, IncreaseNum: 10}\r\n                                        dispatch(incraseCount(action));\r\n                                    }}>+10</button>\r\n                                </td>\r\n                                <td><button className='btnDelete' onClick={()=>{\r\n                                    dispatch(deletItem(index));\r\n                                }}>삭제</button></td>\r\n                            </tr>\r\n                        </tbody>\r\n                        )\r\n                })}\r\n\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cart;"],"names":["React","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","_objectWithoutProperties","_excluded","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","concat","table","_jsx","_objectSpread","responsiveClass","children","myData","useSelector","state","product","myDataAll","dispatch","useDispatch","console","log","user","_jsxs","name","Table","map","data","index","id","count","onClick","action","IncreaseNum","incraseCount","deletItem"],"sourceRoot":""}